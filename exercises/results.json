{"model": "Pipeline(memory=None,\n     steps=[('normalize', TextNormalizer(language=None)), ('vectorize', TfidfVectorizer(analyzer='word', binary=False, decode_error='strict',\n        dtype=<class 'numpy.float64'>, encoding='utf-8', input='content',\n        lowercase=False, max_df=1.0, max_features=None, min_df=1,\n        ngram_range=(1,...penalty='l2', random_state=None, solver='warn',\n          tol=0.0001, verbose=0, warm_start=False))])", "name": "LogisticRegression (TruncatedSVD)", "accuracy": [0.875, 0.5, 0.75, 0.75, 0.375], "precision": [0.90625, 0.7857142857142857, 0.85, 0.8333333333333333, 0.140625], "recall": [0.875, 0.5, 0.75, 0.75, 0.375], "f1": [0.876984126984127, 0.43333333333333335, 0.7499999999999999, 0.7333333333333334, 0.20454545454545453], "time": [383.3272490501404, 399.02852988243103, 364.45569896698, 231.20287084579468, 300.471923828125]}
{"model": "Pipeline(memory=None,\n     steps=[('normalize', TextNormalizer(language=None)), ('vectorize', TfidfVectorizer(analyzer='word', binary=False, decode_error='strict',\n        dtype=<class 'numpy.float64'>, encoding='utf-8', input='content',\n        lowercase=False, max_df=1.0, max_features=None, min_df=1,\n        ngram_range=(1,...penalty='l2', random_state=None, solver='warn',\n          tol=0.0001, verbose=0, warm_start=False))])", "name": "LogisticRegression", "accuracy": [0.875, 0.5, 0.75, 1.0, 0.75], "precision": [0.90625, 0.7857142857142857, 0.8333333333333333, 1.0, 0.75], "recall": [0.875, 0.5, 0.75, 1.0, 0.75], "f1": [0.876984126984127, 0.43333333333333335, 0.7333333333333334, 1.0, 0.75], "time": [26.86412787437439, 26.35666584968567, 26.615153074264526, 26.357041120529175, 26.508198738098145]}
{"model": "Pipeline(memory=None,\n     steps=[('normalize', TextNormalizer(language=None)), ('vectorize', TfidfVectorizer(analyzer='word', binary=False, decode_error='strict',\n        dtype=<class 'numpy.float64'>, encoding='utf-8', input='content',\n        lowercase=False, max_df=1.0, max_features=None, min_df=1,\n        ngram_range=(1,...m_state=None, shuffle=True, tol=None,\n       validation_fraction=0.1, verbose=0, warm_start=False))])", "name": "SGDClassifier (TruncatedSVD)", "accuracy": [0.75, 0.75, 0.25, 0.75, 0.5], "precision": [0.8333333333333333, 0.8214285714285714, 0.0625, 0.5625, 0.7857142857142857], "recall": [0.75, 0.75, 0.25, 0.75, 0.5], "f1": [0.7333333333333334, 0.7083333333333333, 0.1, 0.6428571428571428, 0.43333333333333335], "time": [277.7201421260834, 243.97629594802856, 351.9934058189392, 252.45352029800415, 293.83006024360657]}
{"model": "Pipeline(memory=None,\n     steps=[('normalize', TextNormalizer(language=None)), ('vectorize', TfidfVectorizer(analyzer='word', binary=False, decode_error='strict',\n        dtype=<class 'numpy.float64'>, encoding='utf-8', input='content',\n        lowercase=False, max_df=1.0, max_features=None, min_df=1,\n        ngram_range=(1,...m_state=None, shuffle=True, tol=None,\n       validation_fraction=0.1, verbose=0, warm_start=False))])", "name": "SGDClassifier", "accuracy": [0.5, 0.875, 0.75, 0.625, 0.625], "precision": [0.7857142857142857, 0.8958333333333334, 0.8333333333333333, 0.7857142857142857, 0.6333333333333333], "recall": [0.5, 0.875, 0.75, 0.625, 0.625], "f1": [0.43333333333333335, 0.8681818181818182, 0.7333333333333334, 0.5636363636363637, 0.6190476190476191], "time": [27.36812996864319, 27.444243907928467, 26.865360975265503, 26.73070216178894, 26.74694299697876]}
{"model": "Pipeline(memory=None,\n     steps=[('normalize', TextNormalizer(language=None)), ('vectorize', TfidfVectorizer(analyzer='word', binary=False, decode_error='strict',\n        dtype=<class 'numpy.float64'>, encoding='utf-8', input='content',\n        lowercase=False, max_df=1.0, max_features=None, min_df=1,\n        ngram_range=(1,...      vocabulary=None)), ('classifier', MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True))])", "name": "MultinomialNB", "accuracy": [1.0, 0.875, 0.25, 0.375, 0.625], "precision": [1.0, 0.90625, 0.0625, 0.140625, 0.8125], "recall": [1.0, 0.875, 0.25, 0.375, 0.625], "f1": [1.0, 0.876984126984127, 0.1, 0.20454545454545453, 0.6071428571428572], "time": [26.695587873458862, 26.84706401824951, 26.52029585838318, 26.60282588005066, 26.773010969161987]}
{"model": "Pipeline(memory=None,\n     steps=[('normalize', TextNormalizer(language=None)), ('vectorize', TfidfVectorizer(analyzer='word', binary=False, decode_error='strict',\n        dtype=<class 'numpy.float64'>, encoding='utf-8', input='content',\n        lowercase=False, max_df=1.0, max_features=None, min_df=1,\n        ngram_range=(1,...,\n       random_state=None, tol=0.0)), ('classifier', GaussianNB(priors=None, var_smoothing=1e-09))])", "name": "GaussianNB (TruncatedSVD)", "accuracy": [0.875, 0.5, 0.75, 1.0, 1.0], "precision": [0.90625, 0.5, 0.75, 1.0, 1.0], "recall": [0.875, 0.5, 0.75, 1.0, 1.0], "f1": [0.876984126984127, 0.4666666666666667, 0.7500000000000001, 1.0, 1.0], "time": [286.2457318305969, 299.6239502429962, 197.897479057312, 240.05169892311096, 280.57902097702026]}
{"model": "Pipeline(memory=None,\n     steps=[('normalize', TextNormalizer(language=None)), ('vectorize', TfidfVectorizer(analyzer='word', binary=False, decode_error='strict',\n        dtype=<class 'numpy.float64'>, encoding='utf-8', input='content',\n        lowercase=False, max_df=1.0, max_features=None, min_df=1,\n        ngram_range=(1,...penalty='l2', random_state=None, solver='warn',\n          tol=0.0001, verbose=0, warm_start=False))])", "name": "LogisticRegression (TruncatedSVD)", "accuracy": [0.875, 0.625, 0.875, 0.375, 0.875], "precision": [0.9, 0.7857142857142857, 0.90625, 0.140625, 0.9], "recall": [0.875, 0.625, 0.875, 0.375, 0.875], "f1": [0.873015873015873, 0.5636363636363637, 0.876984126984127, 0.20454545454545453, 0.873015873015873], "time": [471.83515906333923, 265.8256721496582, 262.6104681491852, 229.49473690986633, 265.87384700775146]}
{"model": "Pipeline(memory=None,\n     steps=[('normalize', TextNormalizer(language=None)), ('vectorize', TfidfVectorizer(analyzer='word', binary=False, decode_error='strict',\n        dtype=<class 'numpy.float64'>, encoding='utf-8', input='content',\n        lowercase=False, max_df=1.0, max_features=None, min_df=1,\n        ngram_range=(1,...penalty='l2', random_state=None, solver='warn',\n          tol=0.0001, verbose=0, warm_start=False))])", "name": "LogisticRegression", "accuracy": [0.5, 0.875, 0.375, 0.5, 0.125], "precision": [0.7857142857142857, 0.9, 0.140625, 0.7857142857142857, 0.015625], "recall": [0.5, 0.875, 0.375, 0.5, 0.125], "f1": [0.43333333333333335, 0.873015873015873, 0.20454545454545453, 0.43333333333333335, 0.027777777777777776], "time": [28.770007848739624, 29.28273582458496, 28.55040192604065, 26.850430011749268, 26.829002857208252]}
{"model": "Pipeline(memory=None,\n     steps=[('normalize', TextNormalizer(language=None)), ('vectorize', TfidfVectorizer(analyzer='word', binary=False, decode_error='strict',\n        dtype=<class 'numpy.float64'>, encoding='utf-8', input='content',\n        lowercase=False, max_df=1.0, max_features=None, min_df=1,\n        ngram_range=(1,...m_state=None, shuffle=True, tol=None,\n       validation_fraction=0.1, verbose=0, warm_start=False))])", "name": "SGDClassifier (TruncatedSVD)", "accuracy": [0.625, 0.75, 0.75, 0.625, 0.5], "precision": [0.7857142857142857, 0.8214285714285714, 0.8214285714285714, 0.7857142857142857, 0.25], "recall": [0.625, 0.75, 0.75, 0.625, 0.5], "f1": [0.5636363636363637, 0.7083333333333333, 0.7083333333333333, 0.5636363636363637, 0.3333333333333333], "time": [318.1757810115814, 280.92403197288513, 338.1135308742523, 325.94128823280334, 254.15639090538025]}
{"model": "Pipeline(memory=None,\n     steps=[('normalize', TextNormalizer(language=None)), ('vectorize', TfidfVectorizer(analyzer='word', binary=False, decode_error='strict',\n        dtype=<class 'numpy.float64'>, encoding='utf-8', input='content',\n        lowercase=False, max_df=1.0, max_features=None, min_df=1,\n        ngram_range=(1,...m_state=None, shuffle=True, tol=None,\n       validation_fraction=0.1, verbose=0, warm_start=False))])", "name": "SGDClassifier", "accuracy": [0.75, 0.625, 0.5, 0.375, 0.75], "precision": [0.85, 0.85, 0.7857142857142857, 0.8214285714285714, 0.8333333333333333], "recall": [0.75, 0.625, 0.5, 0.375, 0.75], "f1": [0.7499999999999999, 0.6428571428571429, 0.43333333333333335, 0.3253968253968254, 0.7333333333333334], "time": [27.41019892692566, 27.220360040664673, 27.183778047561646, 27.05636715888977, 27.320104837417603]}
{"model": "Pipeline(memory=None,\n     steps=[('normalize', TextNormalizer(language=None)), ('vectorize', TfidfVectorizer(analyzer='word', binary=False, decode_error='strict',\n        dtype=<class 'numpy.float64'>, encoding='utf-8', input='content',\n        lowercase=False, max_df=1.0, max_features=None, min_df=1,\n        ngram_range=(1,...      vocabulary=None)), ('classifier', MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True))])", "name": "MultinomialNB", "accuracy": [0.25, 0.5, 0.375, 0.25, 0.75], "precision": [0.0625, 0.25, 0.140625, 0.0625, 0.85], "recall": [0.25, 0.5, 0.375, 0.25, 0.75], "f1": [0.1, 0.3333333333333333, 0.20454545454545453, 0.1, 0.7499999999999999], "time": [27.10627007484436, 303.0384347438812, 29.288594961166382, 27.32172417640686, 27.023669958114624]}
{"model": "Pipeline(memory=None,\n     steps=[('normalize', TextNormalizer(language=None)), ('vectorize', TfidfVectorizer(analyzer='word', binary=False, decode_error='strict',\n        dtype=<class 'numpy.float64'>, encoding='utf-8', input='content',\n        lowercase=False, max_df=1.0, max_features=None, min_df=1,\n        ngram_range=(1,...,\n       random_state=None, tol=0.0)), ('classifier', GaussianNB(priors=None, var_smoothing=1e-09))])", "name": "GaussianNB (TruncatedSVD)", "accuracy": [0.625, 0.875, 0.625, 0.75, 0.875], "precision": [0.6833333333333335, 0.8958333333333334, 0.7857142857142857, 0.75, 0.8958333333333334], "recall": [0.625, 0.875, 0.625, 0.75, 0.875], "f1": [0.6454545454545454, 0.8681818181818182, 0.5636363636363637, 0.75, 0.8681818181818182], "time": [306.7802858352661, 305.32519125938416, 252.32067894935608, 201.9277379512787, 241.3406720161438]}
